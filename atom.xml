<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lovectrl-tan.github.io</id>
    <title>LoveCtrl-Tan</title>
    <updated>2019-10-31T13:18:34.591Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://lovectrl-tan.github.io"/>
    <link rel="self" href="https://lovectrl-tan.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://lovectrl-tan.github.io/images/avatar.png</logo>
    <icon>https://lovectrl-tan.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, LoveCtrl-Tan</rights>
    <entry>
        <title type="html"><![CDATA[XSS]]></title>
        <id>https://lovectrl-tan.github.io/post/xssreflected</id>
        <link href="https://lovectrl-tan.github.io/post/xssreflected">
        </link>
        <updated>2019-10-31T11:06:54.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="xss简介">XSS简介</h1>
<p>XSS是跨站脚本攻击(Cross Site Scripting)的简写，为了不与层叠样式表混淆而改写的。此漏洞也是网站存在相当多的漏洞，仅次于SQL注入，攻击者可以使用XSS来绕过访问控制，如同源策略。利用XSS可以窃取账号，网页挂马，发动拒绝服务攻击，发送垃圾邮件等等。</p>
<h1 id="xss原理及分类">XSS原理及分类</h1>
<p>XSS形成的原因与SQL注入类似，也是由于程序员在开发过程中没有对用户提交的恶意数据做过滤，转义而直接输出到页面，导致用户可以利用此漏洞执行JavaScript，HTML等代码，和SQL注入不同的是XSS不一定要和数据库交互。XSS没有单一的、标准的分类，一般可以分为非持久型（反射型）、持久型（存储型）。通常人们也增加了第三种——基于DOM的XSS。反射型XSS指用户提交的数据没有存储在数据库中而是直接输出到页面，不具有存储性，一次提交只能执行一次。存储型XSS指用户提交的数据存储在了数据库，用户每一次访问都会触发XSS，一次提交可以一直执行，其危害是XSS中最大的。基于DOM的XSS指用户可以修改浏览器中的DOM节点并显示在浏览器上，从而产生XSS。<a href="http://blog.nsfocus.net/xss-advance/">那年我们看不懂的xss</a></p>
]]></summary>
        <content type="html"><![CDATA[<h1 id="xss简介">XSS简介</h1>
<p>XSS是跨站脚本攻击(Cross Site Scripting)的简写，为了不与层叠样式表混淆而改写的。此漏洞也是网站存在相当多的漏洞，仅次于SQL注入，攻击者可以使用XSS来绕过访问控制，如同源策略。利用XSS可以窃取账号，网页挂马，发动拒绝服务攻击，发送垃圾邮件等等。</p>
<h1 id="xss原理及分类">XSS原理及分类</h1>
<p>XSS形成的原因与SQL注入类似，也是由于程序员在开发过程中没有对用户提交的恶意数据做过滤，转义而直接输出到页面，导致用户可以利用此漏洞执行JavaScript，HTML等代码，和SQL注入不同的是XSS不一定要和数据库交互。XSS没有单一的、标准的分类，一般可以分为非持久型（反射型）、持久型（存储型）。通常人们也增加了第三种——基于DOM的XSS。反射型XSS指用户提交的数据没有存储在数据库中而是直接输出到页面，不具有存储性，一次提交只能执行一次。存储型XSS指用户提交的数据存储在了数据库，用户每一次访问都会触发XSS，一次提交可以一直执行，其危害是XSS中最大的。基于DOM的XSS指用户可以修改浏览器中的DOM节点并显示在浏览器上，从而产生XSS。<a href="http://blog.nsfocus.net/xss-advance/">那年我们看不懂的xss</a></p>
<!-- more -->
<h1 id="xssreflected">XSS(Reflected)</h1>
<h2 id="low">Low</h2>
<p><img src="https://raw.githubusercontent.com/LoveCtrl-Tan/BlogPicture-/master/QQ%E6%B5%8F%E8%A7%88%E5%99%A8%E6%88%AA%E5%9B%BE20191031190730.png" alt=""><br>
首先它让我们输入名字，我们先随便输入一个名字<br>
<img src="https://raw.githubusercontent.com/LoveCtrl-Tan/BlogPicture-/master/QQ%E6%B5%8F%E8%A7%88%E5%99%A8%E6%88%AA%E5%9B%BE20191031190744.png" alt=""><br>
发现下面出现了我们刚才输入的名字，我们可以判断这里有可能出现XSS漏洞<br>
接下来我们来尝试着输入<code>script</code>代码<br>
<code>&lt;script&gt;alert(/&quot;XSS&quot;/)&lt;/script&gt;</code><br>
<img src="https://raw.githubusercontent.com/LoveCtrl-Tan/BlogPicture-/master/QQ%E6%B5%8F%E8%A7%88%E5%99%A8%E6%88%AA%E5%9B%BE20191031190959.png" alt=""><br>
成功弹窗<br>
我们也可以利用这个漏洞来盗取COOKIES<br>
<code>&lt;script&gt;alert(document.cookie)&lt;/script&gt;</code><br>
<img src="https://raw.githubusercontent.com/LoveCtrl-Tan/BlogPicture-/master/QQ%E6%B5%8F%E8%A7%88%E5%99%A8%E6%88%AA%E5%9B%BE20191031195743.png" alt=""><br>
还可以构造页面跳转Javascript代码<br>
<code>&lt;script&gt;location='https://www.baidu.com'&lt;/script&gt;</code><br>
<img src="https://raw.githubusercontent.com/LoveCtrl-Tan/BlogPicture-/master/QQ%E6%B5%8F%E8%A7%88%E5%99%A8%E6%88%AA%E5%9B%BE20191031195905.png" alt=""><br>
以下为源码<br>
<img src="https://raw.githubusercontent.com/LoveCtrl-Tan/BlogPicture-/master/QQ%E6%B5%8F%E8%A7%88%E5%99%A8%E6%88%AA%E5%9B%BE20191031191256.png" alt=""></p>
<h2 id="medium">Medium</h2>
<p>我们输入<code>&lt;script&gt;alert(/&quot;XSS&quot;/)&lt;/script&gt;</code><br>
<img src="https://raw.githubusercontent.com/LoveCtrl-Tan/BlogPicture-/master/QQ%E6%B5%8F%E8%A7%88%E5%99%A8%E6%88%AA%E5%9B%BE20191031191742.png" alt=""><br>
发现<code>&lt;script&gt;</code>和<code>&lt;/script&gt;</code>被过滤掉了，这种情况我们可以用大小写的方式绕过它<br>
<code>&lt;scRIpt&gt;alert(/&quot;XSS&quot;/)&lt;/scRiPt&gt;</code><br>
<img src="https://raw.githubusercontent.com/LoveCtrl-Tan/BlogPicture-/master/QQ%E6%B5%8F%E8%A7%88%E5%99%A8%E6%88%AA%E5%9B%BE20191031192141.png" alt=""><br>
成功弹窗<br>
我们也可以双写绕过<br>
<code>&lt;scr&lt;script&gt;ipt&gt;alert(/&quot;XSS&quot;/)&lt;/scr&lt;script&gt;ipt&gt;</code><br>
<img src="https://raw.githubusercontent.com/LoveCtrl-Tan/BlogPicture-/master/QQ%E6%B5%8F%E8%A7%88%E5%99%A8%E6%88%AA%E5%9B%BE20191031203318.png" alt=""><br>
<img src="https://raw.githubusercontent.com/LoveCtrl-Tan/BlogPicture-/master/QQ%E6%B5%8F%E8%A7%88%E5%99%A8%E6%88%AA%E5%9B%BE20191031200528.png" alt=""><br>
分析源码，发现他使用了<code>str_replace</code>函数将<code>&lt;script&gt;</code>替换成了其他字符</p>
<h2 id="high">High</h2>
<p>我们查看源码<br>
<img src="https://raw.githubusercontent.com/LoveCtrl-Tan/BlogPicture-/master/QQ%E6%B5%8F%E8%A7%88%E5%99%A8%E6%88%AA%E5%9B%BE20191031201413.png" alt=""><br>
发现它使用了<code>pre_replace</code>函数,函数用于正则表达式的搜索和替换，这使得双写绕过、大小写混淆绕过（正则表达式中i表示不区分大小写）不再有效<br>
这时候我们可以使用其他标签,如<code>a</code>标签或者<code>img</code>标签。<br>
<code>&lt;img src=1 onerror=alert(/xss/)&gt;</code><br>
<img src="https://img-blog.csdnimg.cn/20190828122624293.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMyMjYxMTkx,size_16,color_FFFFFF,t_70" alt=""></p>
<h2 id="impossible">Impossible</h2>
<p><img src="https://raw.githubusercontent.com/LoveCtrl-Tan/BlogPicture-/master/QQ%E6%B5%8F%E8%A7%88%E5%99%A8%E6%88%AA%E5%9B%BE20191031202930.png" alt=""><br>
可以看到，Impossible级别的代码使用htmlspecialchars函数把预定义的字符&amp;、”、 ’、&lt;、&gt;转换为 HTML 实体，防止浏览器将其作为HTML元素。</p>
<!-- more -->
<h1 id="xssstored">XSS(Stored)</h1>
<h2 id="low-2">Low</h2>
<p>服务器核心代码</p>
<pre><code>&lt;?php 

if( isset( $_POST[ 'btnSign' ] ) ) { 
    // Get input 
    $message = trim( $_POST[ 'mtxMessage' ] ); 
    $name    = trim( $_POST[ 'txtName' ] ); 

    // Sanitize message input 
    $message = stripslashes( $message ); 
    $message = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $message ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;)); 

    // Sanitize name input 
    $name = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $name ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;)); 

    // Update database 
    $query  = &quot;INSERT INTO guestbook ( comment, name ) VALUES ( '$message', '$name' );&quot;; 
    $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;],  $query ) or die( '&lt;pre&gt;' . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . '&lt;/pre&gt;' );

    //mysql_close(); 
} 

?&gt; 
</code></pre>
<p>相关函数介绍<br>
<code>trim(string,charlist)</code>：函数移除字符串两侧的空白字符或其他预定义字符，预定义字符包括、\t、\n、\x0B、\r以及空格，可选参数charlist支持添加额外需要删除的字符。<br>
<code>mysql_real_escape_string(string,connection)</code>:函数会对字符串中的特殊符号（\x00，\n，\r，\，‘，“，\x1a）进行转义。<br>
<code>stripslashes(string)</code>:函数删除字符串中的反斜杠。<br>
我们发现它没有进行任何过滤<br>
漏洞利用<br>
<img src="https://raw.githubusercontent.com/LoveCtrl-Tan/BlogPicture-/master/QQ%E6%B5%8F%E8%A7%88%E5%99%A8%E6%88%AA%E5%9B%BE20191031205120.png" alt=""><br>
我们发现姓名这里的长度受到限制，我们可以通过修改<code>html</code>代码。<br>
现在我们开始输入代码<br>
<code>&lt;script&gt;alert(/&quot;XSS&quot;/)&lt;/script&gt;</code><br>
<img src="https://raw.githubusercontent.com/LoveCtrl-Tan/BlogPicture-/master/QQ%E6%B5%8F%E8%A7%88%E5%99%A8%E6%88%AA%E5%9B%BE20191031205510.png" alt=""><br>
成功插入数据库，之后我们再点开时，他就会进行弹窗<br>
<img src="https://raw.githubusercontent.com/LoveCtrl-Tan/BlogPicture-/master/QQ%E6%B5%8F%E8%A7%88%E5%99%A8%E6%88%AA%E5%9B%BE20191031205526.png" alt=""></p>
<h2 id="medium-2">Medium</h2>
<p>核心代码</p>
<pre><code>&lt;?php 

if( isset( $_POST[ 'btnSign' ] ) ) { 
    // Get input 
    $message = trim( $_POST[ 'mtxMessage' ] ); 
    $name    = trim( $_POST[ 'txtName' ] ); 

    // Sanitize message input 
    $message = strip_tags( addslashes( $message ) ); 
    $message = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $message ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;)); 
    $message = htmlspecialchars( $message ); 

    // Sanitize name input 
    $name = str_replace( '&lt;script&gt;', '', $name ); 
    $name = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $name ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;)); 

    // Update database 
    $query  = &quot;INSERT INTO guestbook ( comment, name ) VALUES ( '$message', '$name' );&quot;; 
    $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;],  $query ) or die( '&lt;pre&gt;' . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . '&lt;/pre&gt;' );

    //mysql_close(); 
} 

?&gt; 
</code></pre>
<p>函数说明<br>
<code>strip_tags()</code>:剥去字符串中的 HTML、XML 以及 PHP 的标签，但允许使用<b>标签。<br>
<code>addslashes()</code>:返回在预定义字符（单引号、双引号、反斜杠、NULL）之前添加反斜杠的字符串。</p>
<!-- more -->
<p>可以看到，由于对message参数使用了htmlspecialchars函数进行编码，因此无法再通过message参数注入XSS代码，但是对于name参数，只是简单过滤了<script>字符串，仍然存在存储型的XSS。</p>
<p>漏洞利用<br>
1.双写绕过<br>
<code>&lt;sc&lt;script&gt;ript&gt;alert(/&quot;XSS&quot;/)&lt;/sc&lt;/script&gt;ript&gt;</code><br>
<img src="https://raw.githubusercontent.com/LoveCtrl-Tan/BlogPicture-/master/QQ%E6%B5%8F%E8%A7%88%E5%99%A8%E6%88%AA%E5%9B%BE20191031210755.png" alt=""><br>
2.大小写绕过<br>
<code>&lt;SCript&gt;alert(/&quot;XSS&quot;/)&lt;/SCript&gt;</code><br>
<img src="https://raw.githubusercontent.com/LoveCtrl-Tan/BlogPicture-/master/QQ%E6%B5%8F%E8%A7%88%E5%99%A8%E6%88%AA%E5%9B%BE20191031210932.png" alt=""></p>
<h2 id="high-2">High</h2>
<p>核心代码</p>
<pre><code>&lt;?php 

if( isset( $_POST[ 'btnSign' ] ) ) { 
    // Get input 
    $message = trim( $_POST[ 'mtxMessage' ] ); 
    $name    = trim( $_POST[ 'txtName' ] ); 

    // Sanitize message input 
    $message = strip_tags( addslashes( $message ) ); 
    $message = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $message ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;)); 
    $message = htmlspecialchars( $message ); 

    // Sanitize name input 
    $name = preg_replace( '/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i', '', $name ); 
    $name = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $name ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;)); 

    // Update database 
    $query  = &quot;INSERT INTO guestbook ( comment, name ) VALUES ( '$message', '$name' );&quot;; 
    $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;],  $query ) or die( '&lt;pre&gt;' . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . '&lt;/pre&gt;' );

    //mysql_close(); 
} 

?&gt; 
</code></pre>
<p>可以看到，这里使用正则表达式过滤了<script>标签，但是却忽略了img、iframe等其它危险的标签，因此name参数依旧存在存储型XSS</p>
<p>漏洞利用<br>
<code>&lt;img src=1 onerror=alert(/&quot;XSS&quot;/)&gt;</code><br>
<img src="https://raw.githubusercontent.com/LoveCtrl-Tan/BlogPicture-/master/QQ%E6%B5%8F%E8%A7%88%E5%99%A8%E6%88%AA%E5%9B%BE20191031211211.png" alt=""></p>
<h2 id="impossible-2">Impossible</h2>
<p>核心代码</p>
<pre><code>&lt;?php 

if( isset( $_POST[ 'btnSign' ] ) ) { 
    // Check Anti-CSRF token 
    checkToken( $_REQUEST[ 'user_token' ], $_SESSION[ 'session_token' ], 'index.php' ); 

    // Get input 
    $message = trim( $_POST[ 'mtxMessage' ] ); 
    $name    = trim( $_POST[ 'txtName' ] ); 

    // Sanitize message input 
    $message = stripslashes( $message ); 
    $message = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $message ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;)); 
    $message = htmlspecialchars( $message ); 

    // Sanitize name input 
    $name = stripslashes( $name ); 
    $name = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $name ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;)); 
    $name = htmlspecialchars( $name ); 

    // Update database 
    $data = $db-&gt;prepare( 'INSERT INTO guestbook ( comment, name ) VALUES ( :message, :name );' ); 
    $data-&gt;bindParam( ':message', $message, PDO::PARAM_STR ); 
    $data-&gt;bindParam( ':name', $name, PDO::PARAM_STR ); 
    $data-&gt;execute(); 
} 

// Generate Anti-CSRF token 
generateSessionToken(); 

?&gt; 
</code></pre>
<p>可以看到，通过使用htmlspecialchars函数，解决了XSS，但是要注意的是，如果htmlspecialchars函数使用不当，攻击者就可以通过编码的方式绕过函数进行XSS注入，尤其是DOM型的XSS。</p>
<!-- more -->
<p>参考文章:<br>
1.https://blog.csdn.net/qq_32261191/article/details/80959103#%E6%9C%80%E5%90%8E%E6%B3%A8%E5%85%A5%E9%80%89%E9%A1%B9<br>
2.http://192.168.153.130/dvwa/vulnerabilities/xss_r/?name=<script>alert(/xss/)&lt;%2Fscript&gt;#</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SQL Injection(Blind)]]></title>
        <id>https://lovectrl-tan.github.io/post/sql-injectionblind</id>
        <link href="https://lovectrl-tan.github.io/post/sql-injectionblind">
        </link>
        <updated>2019-10-31T10:43:57.000Z</updated>
        <content type="html"><![CDATA[<h1 id="low">Low</h1>
<p>首先我们看到到就是让你输入<code>UserID</code><br>
<img src="https://raw.githubusercontent.com/LoveCtrl-Tan/BlogPicture-/master/QQ%E6%B5%8F%E8%A7%88%E5%99%A8%E6%88%AA%E5%9B%BE20191031184653.png" alt=""><br>
通过输入我们发现，当你输入ID时，它会提示你是否存在该ID<br>
<img src="https://raw.githubusercontent.com/LoveCtrl-Tan/BlogPicture-/master/QQ%E6%B5%8F%E8%A7%88%E5%99%A8%E6%88%AA%E5%9B%BE20191031184731.png" alt=""><br>
<img src="https://raw.githubusercontent.com/LoveCtrl-Tan/BlogPicture-/master/QQ%E6%B5%8F%E8%A7%88%E5%99%A8%E6%88%AA%E5%9B%BE20191031184739.png" alt=""><br>
这种情况，我们可以使用以下几种方法</p>
<h2 id="报错注入">报错注入</h2>
<p>这种注入方法是当页面只返回对错时使用的，首先我们来判断字段数<br>
<code>1' order by</code><br>
<img src="https://raw.githubusercontent.com/LoveCtrl-Tan/BlogPicture-/master/QQ%E6%B5%8F%E8%A7%88%E5%99%A8%E6%88%AA%E5%9B%BE20191031185744.png" alt=""><br>
<img src="https://raw.githubusercontent.com/LoveCtrl-Tan/BlogPicture-/master/QQ%E6%B5%8F%E8%A7%88%E5%99%A8%E6%88%AA%E5%9B%BE20191031185757.png" alt=""><br>
判断字段数为<code>2</code>，现在我们来认识几个函数</p>
<pre><code>substr(string,start,length)，返回字符串的一部分。
string-指定要截取的字符串。
start-必需，规定在字符串的何处开始。
length-可选，指定要截取的字符串长度，缺省时返回字符表达式的值结束前的全部字符。
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[DVWA]]></title>
        <id>https://lovectrl-tan.github.io/post/dvwa</id>
        <link href="https://lovectrl-tan.github.io/post/dvwa">
        </link>
        <updated>2019-10-19T13:13:43.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li><a href="https://lovectrl-tan.github.io/post/file-upload/">File Upload</a></li>
<li><a href="https://lovectrl-tan.github.io/post/csrf/">CSRF</a></li>
<li><a href="https://lovectrl-tan.github.io/post/sql-injection/">SQL Injection</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SQL-LABS]]></title>
        <id>https://lovectrl-tan.github.io/post/sql-labs</id>
        <link href="https://lovectrl-tan.github.io/post/sql-labs">
        </link>
        <updated>2019-10-17T11:05:01.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li><a href="https://lovectrl-tan.github.io/post/sqli-zhu-ru/">GET-Error based - Single quotes-String Less-1</a></li>
<li><a href="https://lovectrl-tan.github.io/post/di-er-guan/">GET-Error based-intiger based Less-2</a></li>
<li><a href="https://lovectrl-tan.github.io/post/di-san-guan/">GET-Error bases-Single quotes with twist-string Less-3</a></li>
<li><a href="https://lovectrl-tan.github.io/post/di-si-guan/">GET -Error based-Double Quotes-String Less-4</a></li>
<li><a href="https://lovectrl-tan.github.io/post/di-wu-guan/">GET - Double injection-Single Quotes-String Less-5</a></li>
</ul>
]]></content>
    </entry>
</feed>